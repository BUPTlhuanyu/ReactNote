"use strict";(self.webpackChunkreact_note_docusaurus=self.webpackChunkreact_note_docusaurus||[]).push([[5708],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=u(n),d=a,h=b["".concat(c,".").concat(d)]||b[d]||p[d]||i;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},884:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return b}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},c="create-subscription",u={unversionedId:"react/react/source-code/react@16.6/create-subscription/README",id:"react/react/source-code/react@16.6/create-subscription/README",isDocsHomePage:!1,title:"create-subscription",description:"create-subscription is a utility for subscribing to external data sources inside React components. It is officially supported and maintained by the React team.",source:"@site/docs/react/react/source-code/react@16.6/create-subscription/README.md",sourceDirName:"react/react/source-code/react@16.6/create-subscription",slug:"/react/react/source-code/react@16.6/create-subscription/README",permalink:"/docs/react/react/source-code/react@16.6/create-subscription/README",editUrl:"https://github.com/BUPTlhuanyu/ReactNote/tree/master/docs/react/react/source-code/react@16.6/create-subscription/README.md",tags:[],version:"current",frontMatter:{}},l=[{value:"When should you NOT use this?",id:"when-should-you-not-use-this",children:[]},{value:"Limitations in async mode",id:"limitations-in-async-mode",children:[]},{value:"What types of subscriptions can this support?",id:"what-types-of-subscriptions-can-this-support",children:[]},{value:"Subscribing to event dispatchers",id:"subscribing-to-event-dispatchers",children:[]},{value:"Subscribing to observables",id:"subscribing-to-observables",children:[{value:"<code>BehaviorSubject</code>",id:"behaviorsubject",children:[]},{value:"<code>ReplaySubject</code>",id:"replaysubject",children:[]}]},{value:"Subscribing to a Promise",id:"subscribing-to-a-promise",children:[]}],p={toc:l};function b(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-subscription"},"create-subscription"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"create-subscription")," is a utility for subscribing to external data sources inside React components. It is officially supported and maintained by the React team."),(0,i.kt)("h2",{id:"when-should-you-not-use-this"},"When should you NOT use this?"),(0,i.kt)("p",null,"This utility should be used for subscriptions to a single value that are typically only read in one place and may update frequently (e.g. a component that subscribes to a geolocation API to show a dot on a map)."),(0,i.kt)("p",null,"Other cases have ",(0,i.kt)("strong",{parentName:"p"},"better long-term solutions"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Redux/Flux stores should use the ",(0,i.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/context.html"},"context API")," instead."),(0,i.kt)("li",{parentName:"ul"},"I/O subscriptions (e.g. notifications) that update infrequently should use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/master/packages/react-cache/README.md"},(0,i.kt)("inlineCode",{parentName:"a"},"react-cache"))," instead."),(0,i.kt)("li",{parentName:"ul"},"Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced ",(0,i.kt)("a",{parentName:"li",href:"https://gist.github.com/bvaughn/d569177d70b50b58bff69c3c4a5353f3"},"here"),") in a way that is most optimized for their library usage.")),(0,i.kt)("h2",{id:"limitations-in-async-mode"},"Limitations in async mode"),(0,i.kt)("p",null,"The main motivation for ",(0,i.kt)("inlineCode",{parentName:"p"},"create-subscription")," is to provide a way for library authors to ensure compatibility with React's upcoming asynchronous rendering mode. ",(0,i.kt)("inlineCode",{parentName:"p"},"create-subscription")," guarantees correctness in async mode, accounting for the subtle bugs and edge cases that a library author might otherwise miss."),(0,i.kt)("p",null,"However, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/issues/13186#issuecomment-403959161"},"it achieves correctness by sometimes de-opting to synchronous mode"),", obviating the benefits of async rendering. This is an inherent limitation of storing state outside of React's managed state queue and rendering in response to a change event."),(0,i.kt)("p",null,"The effect of de-opting to sync mode is that the main thread may periodically be blocked (in the case of CPU-bound work), and placeholders may appear earlier than desired (in the case of IO-bound work)."),(0,i.kt)("p",null,"For ",(0,i.kt)("strong",{parentName:"p"},"full compatibility")," with asynchronous rendering, including both ",(0,i.kt)("strong",{parentName:"p"},"time-slicing")," and ",(0,i.kt)("strong",{parentName:"p"},"React Suspense"),", the suggested longer-term solution is to move to one of the patterns described in the previous section."),(0,i.kt)("h2",{id:"what-types-of-subscriptions-can-this-support"},"What types of subscriptions can this support?"),(0,i.kt)("p",null,"This abstraction can handle a variety of subscription types, including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Event dispatchers like ",(0,i.kt)("inlineCode",{parentName:"li"},"HTMLInputElement"),"."),(0,i.kt)("li",{parentName:"ul"},"Custom pub/sub components like Relay's ",(0,i.kt)("inlineCode",{parentName:"li"},"FragmentSpecResolver"),"."),(0,i.kt)("li",{parentName:"ul"},"Observable types like RxJS ",(0,i.kt)("inlineCode",{parentName:"li"},"BehaviorSubject")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ReplaySubject"),". (Types like RxJS ",(0,i.kt)("inlineCode",{parentName:"li"},"Subject")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Observable"),' are not supported, because they provide no way to read the "current" value after it has been emitted.)'),(0,i.kt)("li",{parentName:"ul"},"Native Promises.")),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"# Yarn\nyarn add create-subscription\n\n# NPM\nnpm install create-subscription --save\n")),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To configure a subscription, you must provide two methods: ",(0,i.kt)("inlineCode",{parentName:"p"},"getCurrentValue")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { createSubscription } from "create-subscription";\n\nconst Subscription = createSubscription({\n  getCurrentValue(source) {\n    // Return the current value of the subscription (source),\n    // or `undefined` if the value can\'t be read synchronously (e.g. native Promises).\n  },\n  subscribe(source, callback) {\n    // Subscribe (e.g. add an event listener) to the subscription (source).\n    // Call callback(newValue) whenever a subscription changes.\n    // Return an unsubscribe method,\n    // Or a no-op if unsubscribe is not supported (e.g. native Promises).\n  }\n});\n')),(0,i.kt)("p",null,"To use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Subscription")," component, pass the subscribable property (e.g. an event dispatcher, observable) as the ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," property and use a ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/render-props.html"},"render prop"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"children"),", to handle the subscribed value when it changes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<Subscription source={eventDispatcher}>\n  {value => <AnotherComponent value={value} />}\n</Subscription>\n")),(0,i.kt)("h1",{id:"examples"},"Examples"),(0,i.kt)("p",null,'This API can be used to subscribe to a variety of "subscribable" sources, from event dispatchers to RxJS observables. Below are a few examples of how to subscribe to common types.'),(0,i.kt)("h2",{id:"subscribing-to-event-dispatchers"},"Subscribing to event dispatchers"),(0,i.kt)("p",null,"Below is an example showing how ",(0,i.kt)("inlineCode",{parentName:"p"},"create-subscription")," can be used to subscribe to event dispatchers such as DOM elements."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import React from "react";\nimport { createSubscription } from "create-subscription";\n\n// Start with a simple component.\n// In this case, it\'s a function component, but it could have been a class.\nfunction FollowerComponent({ followersCount }) {\n  return <div>You have {followersCount} followers!</div>;\n}\n\n// Create a wrapper component to manage the subscription.\nconst EventHandlerSubscription = createSubscription({\n  getCurrentValue: eventDispatcher => eventDispatcher.value,\n  subscribe: (eventDispatcher, callback) => {\n    const onChange = event => callback(eventDispatcher.value);\n    eventDispatcher.addEventListener("change", onChange);\n    return () => eventDispatcher.removeEventListener("change", onChange);\n  }\n});\n\n// Your component can now be used as shown below.\n// In this example, \'eventDispatcher\' represents a generic event dispatcher.\n<EventHandlerSubscription source={eventDispatcher}>\n  {value => <FollowerComponent followersCount={value} />}\n</EventHandlerSubscription>;\n')),(0,i.kt)("h2",{id:"subscribing-to-observables"},"Subscribing to observables"),(0,i.kt)("p",null,"Below are examples showing how ",(0,i.kt)("inlineCode",{parentName:"p"},"create-subscription")," can be used to subscribe to certain types of observables (e.g. RxJS ",(0,i.kt)("inlineCode",{parentName:"p"},"BehaviorSubject")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ReplaySubject"),")."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," that it is not possible to support all observable types (e.g. RxJS ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Observable"),') because some provide no way to read the "current" value after it has been emitted.'),(0,i.kt)("h3",{id:"behaviorsubject"},(0,i.kt)("inlineCode",{parentName:"h3"},"BehaviorSubject")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const BehaviorSubscription = createSubscription({\n  getCurrentValue: behaviorSubject => behaviorSubject.getValue(),\n  subscribe: (behaviorSubject, callback) => {\n    const subscription = behaviorSubject.subscribe(callback);\n    return () => subscription.unsubscribe();\n  }\n});\n")),(0,i.kt)("h3",{id:"replaysubject"},(0,i.kt)("inlineCode",{parentName:"h3"},"ReplaySubject")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const ReplaySubscription = createSubscription({\n  getCurrentValue: replaySubject => {\n    let currentValue;\n    // ReplaySubject does not have a sync data getter,\n    // So we need to temporarily subscribe to retrieve the most recent value.\n    replaySubject\n      .subscribe(value => {\n        currentValue = value;\n      })\n      .unsubscribe();\n    return currentValue;\n  },\n  subscribe: (replaySubject, callback) => {\n    const subscription = replaySubject.subscribe(callback);\n    return () => subscription.unsubscribe();\n  }\n});\n")),(0,i.kt)("h2",{id:"subscribing-to-a-promise"},"Subscribing to a Promise"),(0,i.kt)("p",null,"Below is an example showing how ",(0,i.kt)("inlineCode",{parentName:"p"},"create-subscription")," can be used with native Promises."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," that an initial render value of ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," is unavoidable due to the fact that Promises provide no way to synchronously read their current value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),' the lack of a way to "unsubscribe" from a Promise can result in memory leaks as long as something has a reference to the Promise. This should be taken into consideration when determining whether Promises are appropriate to use in this way within your application.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import React from "react";\nimport { createSubscription } from "create-subscription";\n\n// Start with a simple component.\nfunction LoadingComponent({ loadingStatus }) {\n  if (loadingStatus === undefined) {\n    // Loading\n  } else if (loadingStatus === null) {\n    // Error\n  } else {\n    // Success\n  }\n}\n\n// Wrap the function component with a subscriber HOC.\n// This HOC will manage subscriptions and pass values to the decorated component.\n// It will add and remove subscriptions in an async-safe way when props change.\nconst PromiseSubscription = createSubscription({\n  getCurrentValue: promise => {\n    // There is no way to synchronously read a Promise\'s value,\n    // So this method should return undefined.\n    return undefined;\n  },\n  subscribe: (promise, callback) => {\n    promise.then(\n      // Success\n      value => callback(value),\n      // Failure\n      () => callback(null)\n    );\n\n    // There is no way to "unsubscribe" from a Promise.\n    // create-subscription will still prevent stale values from rendering.\n    return () => {};\n  }\n});\n\n// Your component can now be used as shown below.\n<PromiseSubscription source={loadingPromise}>\n  {loadingStatus => <LoadingComponent loadingStatus={loadingStatus} />}\n</PromiseSubscription>\n')))}b.isMDXComponent=!0}}]);